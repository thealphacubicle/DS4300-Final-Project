import json
import boto3
import os

# Create a Step Functions client using boto3
sf_client = boto3.client('stepfunctions')

# Retrieve the Step Function State Machine ARN from an environment variable
STATE_MACHINE_ARN = os.environ['STATE_MACHINE_ARN']


def lambda_handler(event, context):
    """
    Lambda handler for S3-triggered events. This function extracts the bucket name and object key
    from the event payload and starts the Step Functions state machine execution.
    """
    print("Received event: ", json.dumps(event))

    try:
        # Assuming the event is generated by S3 when a new object is created.
        # S3 event records typically contain an array of records.
        record = event['Records'][0]
        bucket = record['s3']['bucket']['name']
        key = record['s3']['object']['key']
        media_file_uri = f"s3://{bucket}/{key}"

        # Prepare input for the Step Function.
        # You can expand this payload later if you need to pass additional parameters.
        input_payload = {
            "bucket": bucket,
            "key": key,
            "media_file_uri": media_file_uri
        }

        # Start the Step Functions execution
        response = sf_client.start_execution(
            stateMachineArn=STATE_MACHINE_ARN,
            input=json.dumps(input_payload)
        )

        print("Step Function execution started. Execution ARN:", response['executionArn'])
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': "Step Function execution started successfully.",
                'executionArn': response['executionArn']
            })
        }

    except Exception as e:
        print("Error starting Step Function execution:", str(e))
        return {
            'statusCode': 500,
            'body': json.dumps({
                'message': "Error starting Step Function execution.",
                'error': str(e)
            })
        }
